from typing import ClassVar

import numpy
from numpy.typing import NDArray

class Element:
    __members__: ClassVar[dict] = ...  # read-only
    __entries: ClassVar[dict] = ...
    kAgent: ClassVar[Element] = ...
    kBridge: ClassVar[Element] = ...
    kBronzeBar: ClassVar[Element] = ...
    kBronzeHammer: ClassVar[Element] = ...
    kBronzePick: ClassVar[Element] = ...
    kCopper: ClassVar[Element] = ...
    kEmpty: ClassVar[Element] = ...
    kFurnace: ClassVar[Element] = ...
    kGem: ClassVar[Element] = ...
    kGemRing: ClassVar[Element] = ...
    kGold: ClassVar[Element] = ...
    kGoldBar: ClassVar[Element] = ...
    kGrass: ClassVar[Element] = ...
    kIron: ClassVar[Element] = ...
    kIronPick: ClassVar[Element] = ...
    kNails: ClassVar[Element] = ...
    kPlank: ClassVar[Element] = ...
    kRope: ClassVar[Element] = ...
    kStick: ClassVar[Element] = ...
    kStone: ClassVar[Element] = ...
    kTin: ClassVar[Element] = ...
    kWall: ClassVar[Element] = ...
    kWater: ClassVar[Element] = ...
    kWood: ClassVar[Element] = ...
    kWorkshop1: ClassVar[Element] = ...
    kWorkshop2: ClassVar[Element] = ...
    kWorkshop3: ClassVar[Element] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class RewardCode:
    __members__: ClassVar[dict] = ...  # read-only
    __entries: ClassVar[dict] = ...
    kRewardCodeCollectCopper: ClassVar[RewardCode] = ...
    kRewardCodeCollectGem: ClassVar[RewardCode] = ...
    kRewardCodeCollectGold: ClassVar[RewardCode] = ...
    kRewardCodeCollectIron: ClassVar[RewardCode] = ...
    kRewardCodeCollectTin: ClassVar[RewardCode] = ...
    kRewardCodeCollectWood: ClassVar[RewardCode] = ...
    kRewardCodeCraftBridge: ClassVar[RewardCode] = ...
    kRewardCodeCraftBronzeBar: ClassVar[RewardCode] = ...
    kRewardCodeCraftBronzeHammer: ClassVar[RewardCode] = ...
    kRewardCodeCraftBronzePick: ClassVar[RewardCode] = ...
    kRewardCodeCraftGemRing: ClassVar[RewardCode] = ...
    kRewardCodeCraftGoldBar: ClassVar[RewardCode] = ...
    kRewardCodeCraftIronPick: ClassVar[RewardCode] = ...
    kRewardCodeCraftNails: ClassVar[RewardCode] = ...
    kRewardCodeCraftPlank: ClassVar[RewardCode] = ...
    kRewardCodeCraftRope: ClassVar[RewardCode] = ...
    kRewardCodeCraftStick: ClassVar[RewardCode] = ...
    kRewardCodeUseAtFurnace: ClassVar[RewardCode] = ...
    kRewardCodeUseAtWorkstation1: ClassVar[RewardCode] = ...
    kRewardCodeUseAtWorkstation2: ClassVar[RewardCode] = ...
    kRewardCodeUseAtWorkstation3: ClassVar[RewardCode] = ...
    kRewardCodeUseAxe: ClassVar[RewardCode] = ...
    kRewardCodeUseBridge: ClassVar[RewardCode] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class CraftWorldGameState:
    name: ClassVar[str] = ...  # read-only
    num_actions: ClassVar[int] = ...  # read-only
    def __init__(self, board_str: str) -> None: ...
    def __copy__(self) -> CraftWorldGameState: ...
    def __deepcopy__(self, arg0: dict) -> CraftWorldGameState: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def apply_action(self, int: int) -> None: ...
    def is_solution(self) -> bool: ...
    def observation_shape(self) -> tuple[int, int, int]: ...
    def get_observation(self) -> NDArray[numpy.float32]: ...
    def image_shape(self) -> tuple[int, int, int]: ...
    def to_image(self) -> NDArray[numpy.uint8]: ...
    def get_reward_signal(self) -> int: ...
    def get_agent_index(self) -> int: ...
    def get_indices(self, element: Element) -> list[int]: ...
    def add_to_inventory(self, element: Element, count: int) -> None: ...
    def check_inventory(self, element: Element) -> bool: ...
